package copilot;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import copilot.deckAnalysis.DeckAnalysis;
import copilot.deckAnalysis.PokerHandProbabilityTable;
import copilot.handAnalysis.PlayableHandsFinder;
import copilot.handAnalysis.PotentialHandsFinder;
import copilot.utils.Combination;
import copilot.utils.CopilotMessage;
import data.card.PlayingCard;
import data.deck.Deck;
import data.pokerHand.PokerHandTable;
import game.GameState;
import game.UI.CopilotPanel;
import game.scoring.PlayedHand;

public class Copilot implements PlayableHandsFinder{
	private GameState gameState;
	public CopilotPanel copilotPanel;
	public boolean updateCopilotPanel = false;
	
	List<PokerHandProbabilityTable> discardTables = new ArrayList<>();

	public Copilot() {}
	
	public PokerHandProbabilityTable analyzeDeck(Deck deck, PokerHandTable table) {
		DeckAnalysis d = new DeckAnalysis(deck, table);
		System.out.println("[Copilot] - Your deck has the following Poker Hand probabilities:");
		System.out.println(d.printProbabilityTable());
		return d.getTable();
	}
	
	
	/**
	 * Function for finding the potential plays from the current game state and lists the options
	 * 
	 * From any given game state, there are a few options:
	 * - Play a subset of cards from your hand
	 *   - Any number of cards from 1 to 5
	 *   - Some combination of cards of that size  (nCr, n = handSize, r = numPlayed)
	 *   - This generates score and a probability table of potential hands from drawing
	 * - Discard a number of cards 1 to 5
	 *   - Draw some combination of cards of that amount (nCr, n = deckSize, r = numDiscarded)
	 *   - This generates a list of possible hands, which are scored and a probability table is generated
	 * 
	 * So the list of options will be the number of possible hands that could be played + 5 (1-5 discards)
	 * 
	 * @param gameState The GameState to analyze
	 */
	public List<PokerHandProbabilityTable> analyzeGameState(GameState gameState) {
		this.gameState = gameState;
		StringBuilder s = new StringBuilder();
		String analysis;
		
		//Find playable hands
		
		//System.out.println(CopilotMessage.printPlayableHands(gameState.getCurrDeck().drawnCards, findPlayableHands(gameState.getCurrDeck().drawnCards)));
		//System.out.println(CopilotMessage.printPotentialHandProbabilityTable(gameState.getCurrHand(), printProbabilityTableOfPotentialHands(gameState)));
		
		//Analyze all possible hands that could be generated by discards
		List<PokerHandProbabilityTable> discardTables = scanDiscards(gameState);
		
		for(int i = 0; i < discardTables.size(); i++) {
			analysis = CopilotMessage.printProbabilityTableFromDiscard(gameState.getCurrDeck().drawnCards, i + 1, discardTables.get(i).printTable());
			s.append(analysis).append("\n");
			System.out.println(analysis);
		}
		
		return discardTables;
	}
	
	public Vector<PlayedHand> findPlayableHands(Vector<PlayingCard> currHand){
		return PlayableHandsFinder.findPlayableHands(currHand);
	}
	
	public Vector<PlayedHand> findPotentialHands(GameState gameState){
		return PotentialHandsFinder.findPotentialHands(gameState);
	}
	
	public String printProbabilityTableOfPotentialHands(GameState gameState) {
		PotentialHandsFinder p = new PotentialHandsFinder(gameState);
		return p.generateProbabilityTableOfPotentialHands(gameState, 1).printTable();
	}
	
	public List<PokerHandProbabilityTable> scanDiscards(GameState game){
		discardTables.clear();
		PotentialHandsFinder p;	

		System.out.println("HERE - 1");
		for(int i = 1; i <= 5; i++) {
			if (Thread.currentThread().isInterrupted()) {
	            // Clean up and exit early
	            System.out.println("Analysis interrupted");
	            return discardTables;
	        }
			System.out.println("In loop - " + i);
			p = new PotentialHandsFinder(game);
			
			discardTables.add(p.generateProbabilityTableOfPotentialHands(game, i));
			discardTables.get(i - 1).name = String.format("%d discards", i);
			
			if(updateCopilotPanel) copilotPanel.addTab(discardTables.get(i - 1), discardTables.get(i - 1).name);
		}
		
		return discardTables;
	}
}
